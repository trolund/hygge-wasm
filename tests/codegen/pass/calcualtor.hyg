type Counters = struct {add: (int) -> int; 
                        sub: (int) -> int; 
                        mul: (int) -> int; 
                        div: (int) -> int};

// Return a structure with two functions that share a counter.
// The counter is initialized to 0.
// can be either increment or decrement
fun makeCal(): Counters = {
    let mutable count: int = 0;

    // The lambda terms below capture 'count' twice
    struct { add = fun (v: int) -> { count <- count + v };
             sub = fun (v: int) -> { count <- count - v };
             mul = fun (v: int) -> { count <- count * v };
             div = fun (v: int) -> { count <- count / v } } : Counters
};

let c1: Counters = makeCal();
assert(c1.add(2) = 2);
assert(c1.add(4) = 6);
assert(c1.mul(2) = 12);

let c2: Counters = makeCal();
assert(c2.add(10) = 10); // Output: 10 (independent of c1)
assert(c2.div(2) = 5);
assert(c2.sub(2) = 3)
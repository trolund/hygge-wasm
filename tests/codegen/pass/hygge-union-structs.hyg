// Three type aliases for structure types
type Shape = struct { name: string;
                      area: float };
type Circle = struct { name: string;
                       area: float;
                       radius: float };
type Square = struct { name: string;
                       area: float;
                       side: float };

// Structure constructors
let c: Circle = struct { name = "Circle";
                         area = 10.0f * 10.0f * 3.14f;
                         radius = 10.0f };
let s: Square = struct { name = "Square";
                         area = 2.0f * 2.0f;
                         side = 2.0f };
let r: struct {name: string; area: float} =
    struct { name = "Rectangle";
             area = 3.0f * 4.0f;
             width = 3.0f;
             height = 4.0f };

// An optional integer value.
type OptionalShape = union {
    Shape: Shape;
    Circle: Circle;
    Square: Square;
    None: unit
};

fun getField(o: OptionalShape): float  =
    match o with {
        Shape{s} -> s.area;
        Circle{s} -> s.radius;
        Square{s} -> s.side;
        None{_} -> 0.0f
    };

assert(getField(Shape{c}) = 10.0f * 10.0f * 3.14f);
assert(getField(None{()}) = 0.0f);
assert(getField(Circle{c}) = 10.0f);
assert(getField(Square{s}) = 2.0f)
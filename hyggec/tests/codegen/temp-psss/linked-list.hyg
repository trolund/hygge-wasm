type Node = union {
    Leaf: int;
    Node: struct {value: int; next: Node}
};

fun reverseNode(lst: Node): Node = {
    fun reverseHelper(current: Node, prev: Node): Node = {
        match current with {
            Leaf{_} -> prev;
            Node{s} -> { 
                let temp: Node = s.next;
                s.next <- prev;
                reverseHelper(temp, current) 
                }
        }
    };
    reverseHelper(lst, Leaf{0})
};

fun printList(lst: Node): unit = {

    fun printHelper(current: Node): unit = {
        match current with {
            Leaf{v} -> print(v); // Print the value
            Node{s} -> { 
                print(s.value); 
                printHelper(s.next) 
            }
        }
    };

    printHelper(lst)
};

// list needs to start with 0
let originalNode: Node =
    Node{struct{value = 1; next = Node{struct{value = 2; next = Leaf{3}}}}};

printList(originalNode);

println("-------------------------");

let reversedNode: Node = reverseNode(originalNode);

// let newList: Node = appendNode(originalNode, 4);

// Print the reversed list (for demonstration purposes)
printList(reversedNode)
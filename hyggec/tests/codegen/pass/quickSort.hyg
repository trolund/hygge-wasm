fun partition (arr: array{int}, low: int, high: int): int = {
    // Choose the rightmost element as the pivot
    let pivot: int = arrayElem(arr, high);

    // Index of the smaller element
    let mutable i: int = low - 1;
    let mutable j: int = 0;

    for (j <- low; j < high; j++) {
        // If the current element is smaller than or equal to the pivot
        if (arrayElem(arr, j) <= pivot) 
        then {
            // Swap arr[i] and arr[j]
            i <- i + 1;
            let temp: int = arrayElem(arr, i);
            arrayElem(arr, i) <- arrayElem(arr, j);
            arrayElem(arr, j) <- temp;
            ()
        }
        else {()}
    };

    // Swap arr[i+1] and arr[high] (pivot)
    let temp: int = arrayElem(arr, i + 1);
    arrayElem(arr, i + 1) <- arrayElem(arr, high);
    arrayElem(arr, high) <- temp;

    // Return the pivot index
    i + 1
};

fun quickSort(arr: array{int}, low: int, high: int): unit = {
    if (low < high)
    then {
        // Partition the array and get the pivot index
        let pivotIndex: int = partition(arr, low, high);

        // Recursively sort the subarrays on both sides of the pivot
        quickSort(arr, low, pivotIndex - 1);
        quickSort(arr, pivotIndex + 1, high);
        ()
    }
    else {()}
};

let printArray: (array{int}) -> unit = fun(arr: array{int}) -> {
    let mutable x: int = 0; // read input

    do { // do-while to print array data
        println(arrayElem(arr, x)); // read array element
        x <- x + 1 // increment
    } while (x < arrayLength(arr)) // read length of array as part of condition to print array data
};

// initialize array
let arr: array {int} = array(10, 0);

// insert random values
arrayElem(arr, 0) <- 500;
arrayElem(arr, 1) <- 3;
arrayElem(arr, 2) <- 11;
arrayElem(arr, 3) <- 22;
arrayElem(arr, 4) <- 45;
arrayElem(arr, 5) <- 61;
arrayElem(arr, 6) <- 100;
arrayElem(arr, 7) <- 200;
arrayElem(arr, 8) <- 34;
arrayElem(arr, 9) <- 80;

// print initial array
println("ðŸ˜° initial array:");
printArray(arr);
println("ðŸ¤” sorting array... (quick sort)");
// sort array

quickSort(arr, 0, arrayLength(arr) - 1);

println("--------------------------------------");
println("âœ… sorted array:");
// print sorted array
printArray(arr);

// assert that list is sorted correctly
assert(arrayElem(arr, 0) = 3);
assert(arrayElem(arr, 1) = 11);
assert(arrayElem(arr, 2) = 22);
assert(arrayElem(arr, 3) = 34);
assert(arrayElem(arr, 4) = 45);
assert(arrayElem(arr, 5) = 61);
assert(arrayElem(arr, 6) = 80);
assert(arrayElem(arr, 7) = 100);
assert(arrayElem(arr, 8) = 200);
assert(arrayElem(arr, 9) = 500);

println("doneâœ…")
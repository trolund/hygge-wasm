fun binarySearch(arr: array{int}, target: int): int = {
    let mutable low: int = 0;
    let mutable high: int = arrayLength(arr) - 1;
    let mutable result: int = -1;
    let mutable stop: bool = true;

    while (low <= high && stop)
    do {
        let mid: int = low + (high - low) / 2;

        if (arrayElem(arr, mid) = target)
        then {
            // Target found, update the result and break out of the loop
            result <- mid;
            stop <- false; // break
            ()
        } else {()};
        if (arrayElem(arr, mid) < target)
        then {
            // Target is in the right half
            low <- mid + 1;
            ()
        } else {()};
        if (arrayElem(arr, mid) > target)
        then {
            // Target is in the left half
            high <- mid - 1;
            ()
        } else {()}
    };

    // Return the result after the loop
    result
};

// Example usage:
let sortedArray: array {int} = array(10, 0);

// insert random values in order
arrayElem(sortedArray, 0) <- 0;
arrayElem(sortedArray, 1) <- 3;
arrayElem(sortedArray, 2) <- 11;
arrayElem(sortedArray, 3) <- 22;
arrayElem(sortedArray, 4) <- 45;
arrayElem(sortedArray, 5) <- 61;
arrayElem(sortedArray, 6) <- 100;
arrayElem(sortedArray, 7) <- 200;
arrayElem(sortedArray, 8) <- 222;
arrayElem(sortedArray, 9) <- 245;

// Test cases
assert(binarySearch(sortedArray, 22) = 3);
assert(binarySearch(sortedArray, 45) = 4);
assert(binarySearch(sortedArray, 245) = 9);
assert(binarySearch(sortedArray, 0) = 0);
assert(binarySearch(sortedArray, 100) = 6);
assert(binarySearch(sortedArray, 200) = 7);
assert(binarySearch(sortedArray, 222) = 8);
assert(binarySearch(sortedArray, 3) = 1);
assert(binarySearch(sortedArray, 11) = 2);
assert(binarySearch(sortedArray, 61) = 5);
assert(binarySearch(sortedArray, 1) = -1) // not found


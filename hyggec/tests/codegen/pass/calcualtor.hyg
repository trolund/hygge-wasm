type Cal = struct {add: (int) -> int; 
                   sub: (int) -> int; 
                   mul: (int) -> int; 
                   div: (int) -> int};

// Return a structure with two functions that share a counter.
// The counter is initialized to 0.
// can be either do addition, subtraction, multiplication, or division.
fun makeCal(): Cal = {
    let mutable count: int = 0;

    // The lambda terms below capture 'count' twice
    struct { add = fun (v: int) -> { count <- count + v };
             sub = fun (v: int) -> { count <- count - v };
             mul = fun (v: int) -> { count <- count * v };
             div = fun (v: int) -> { count <- count / v } } : Cal
};

let c1: Cal = makeCal();
assert(c1.add(2) = 2);
assert(c1.add(4) = 6);
assert(c1.mul(2) = 12);

let c2: Cal = makeCal();
assert(c2.add(10) = 10); // Output: 10 (independent of c1)
assert(c2.div(2) = 5);
assert(c2.sub(2) = 3)
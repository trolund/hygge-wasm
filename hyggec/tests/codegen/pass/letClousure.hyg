type Counters = struct {f1: (int) -> int; f2: (int) -> int};

fun makeCounters(): Counters = {
    let mutable res: int = 0;

    let add: (int) -> int = fun(x: int) -> {
        res <- res + x
    };

    let sub: (int) -> int = fun(x: int) -> {
        res <- res - x
    };

    struct { f1 = add;
             f2 = sub } : Counters
};

let c1: Counters = makeCounters();
assert(c1.f1(2) = 2); // c1.f1 and c2.f2 should share the same counter
assert(c1.f1(5) = 7);
assert(c1.f2(1) = 6);

let c2: Counters = makeCounters();
assert(c2.f1(10) = 10); // c2.f1 and c2.f2 should share another counter
assert(c2.f2(5) = 5)
// bubble sort in hygge language
let bubbleSort: (array{int}) -> unit = fun(arr: array{int}) -> {

    let mutable swapped: bool = false;
    let len: int = arrayLength(arr);

    do {
        swapped <- false;
        let mutable i: int = 0;

        for (i <- 0; i < (len - 1); i++)
        {
            // Swap the elements if they are in the wrong order
            if (arrayElem(arr, i) > arrayElem(arr, i + 1)) 
            then {
                let temp: int = arrayElem(arr, i);
                arrayElem(arr, i) <- arrayElem(arr, i + 1);
                arrayElem(arr, i + 1) <- temp;
                swapped <- true;
                ()
            } 
            else {()}
        }
    } while (swapped)
};

let arr: array {int} = array(10, 0);
arrayElem(arr, 0) <- 500;
arrayElem(arr, 1) <- 3;
arrayElem(arr, 2) <- 11;
arrayElem(arr, 3) <- 22;
arrayElem(arr, 4) <- 45;
arrayElem(arr, 5) <- 61;
arrayElem(arr, 6) <- 100;
arrayElem(arr, 7) <- 200;
arrayElem(arr, 8) <- 34;
arrayElem(arr, 9) <- 80;

// sort array
bubbleSort(arr);

let mutable x: int = 0; // read input

do { // do-while to print array data
    println(arrayElem(arr, x)); // read array element
    x <- x + 1 // increment
} while (x < arrayLength(arr)); // read length of array as part of condition 

// assert that list is sorted correctly
assert(arrayElem(arr, 0) = 3);
assert(arrayElem(arr, 1) = 11);
assert(arrayElem(arr, 2) = 22);
assert(arrayElem(arr, 3) = 34);
assert(arrayElem(arr, 4) = 45);
assert(arrayElem(arr, 5) = 61);
assert(arrayElem(arr, 6) = 80);
assert(arrayElem(arr, 7) = 100);
assert(arrayElem(arr, 8) = 200);
assert(arrayElem(arr, 9) = 500);

println("doneâœ…")

// function bubbleSort(arr) {
//   var len = arr.length;
//   var swapped;

//   do {
//     swapped = false;

//     for (var i = 0; i < len - 1; i++) {
//       if (arr[i] > arr[i + 1]) {
//         // Swap the elements if they are in the wrong order
//         var temp = arr[i];
//         arr[i] = arr[i + 1];
//         arr[i + 1] = temp;
//         swapped = true;
//       }
//     }
//   } while (swapped);

//   return arr;
// }